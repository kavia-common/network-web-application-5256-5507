{"is_source_file": true, "format": "Python", "description": "This file contains pytest fixtures used for setting up test environments, mocking database collections, and creating a test Flask application for integration testing.", "external_files": ["backend.app", "backend.services.db"], "external_methods": ["backend.app.create_app", "backend.services.db.get_collection"], "published": [], "classes": [], "methods": [{"name": "set_test_env(monkeypatch)", "description": "Sets environment variables to configure test environment, disabling background schedulers and setting dummy database connection parameters.", "scope": "", "scopeKind": ""}, {"name": "mock_collection(monkeypatch)", "description": "Provides a mongomock collection and patches the database service to return this mock collection, avoiding real database operations.", "scope": "", "scopeKind": ""}, {"name": "app(mock_collection, monkeypatch)", "description": "Builds and returns a Flask test application with patched database dependencies and disabled scheduler.", "scope": "", "scopeKind": ""}, {"name": "client(app)", "description": "Creates and returns a test client for the Flask application.", "scope": "", "scopeKind": ""}, {"name": "_get_collection(name=None)", "scope": "mock_collection", "scopeKind": "function", "description": "unavailable"}], "calls": ["monkeypatch.setenv", "mongomock.MongoClient", "db[os.getenv]", "col.create_index", "monkeypatch.setattr", "create_app", "app.test_client"], "search-terms": ["pytest fixtures", "mongomock collection patch", "Flask app test setup", "environment variable patching", "database mocking"], "state": 2, "file_id": 50, "knowledge_revision": 107, "git_revision": "", "ctags": [{"_type": "tag", "name": "_get_collection", "path": "/home/kavia/workspace/code-generation/network-web-application-5256-5507/NetworkWebApplication/backend/tests/integration/conftest.py", "pattern": "/^    def _get_collection(name=None):$/", "file": true, "language": "Python", "kind": "function", "signature": "(name=None)", "scope": "mock_collection", "scopeKind": "function"}, {"_type": "tag", "name": "app", "path": "/home/kavia/workspace/code-generation/network-web-application-5256-5507/NetworkWebApplication/backend/tests/integration/conftest.py", "pattern": "/^def app(mock_collection, monkeypatch):$/", "language": "Python", "kind": "function", "signature": "(mock_collection, monkeypatch)"}, {"_type": "tag", "name": "client", "path": "/home/kavia/workspace/code-generation/network-web-application-5256-5507/NetworkWebApplication/backend/tests/integration/conftest.py", "pattern": "/^def client(app):$/", "language": "Python", "kind": "function", "signature": "(app)"}, {"_type": "tag", "name": "db_service", "path": "/home/kavia/workspace/code-generation/network-web-application-5256-5507/NetworkWebApplication/backend/tests/integration/conftest.py", "pattern": "/^from backend.services import db as db_service$/", "language": "Python", "kind": "unknown", "nameref": "unknown:db"}, {"_type": "tag", "name": "mock_collection", "path": "/home/kavia/workspace/code-generation/network-web-application-5256-5507/NetworkWebApplication/backend/tests/integration/conftest.py", "pattern": "/^def mock_collection(monkeypatch):$/", "language": "Python", "kind": "function", "signature": "(monkeypatch)"}, {"_type": "tag", "name": "set_test_env", "path": "/home/kavia/workspace/code-generation/network-web-application-5256-5507/NetworkWebApplication/backend/tests/integration/conftest.py", "pattern": "/^def set_test_env(monkeypatch):$/", "language": "Python", "kind": "function", "signature": "(monkeypatch)"}], "hash": "aa04dbb2838e54edf05d5d3754093e66", "format-version": 4, "code-base-name": "NetworkWebApplication", "filename": "NetworkWebApplication/backend/tests/integration/conftest.py", "revision_history": [{"107": ""}]}